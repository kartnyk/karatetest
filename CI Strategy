Files in the Karate Repo (integration-tests-karate)

1. .gitlab-ci.yml

This is the primary pipeline file in the Karate repo:

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
    - when: never

karate-tests:
  stage: test
  script:
    - echo "Running Karate tests for environment: $ENVIRONMENT"
    - mvn clean test -Dkarate.env=$ENVIRONMENT
  artifacts:
    when: always
    paths:
      - target/karate-reports
    expire_in: 7 days

Purpose:

Ensures the pipeline only runs when triggered from another project.

Executes Karate tests using the specified ENVIRONMENT.



---

2. karate-trigger-template.yml

This template file allows external projects to trigger the Karate pipeline.

trigger-karate-tests:
  stage: IntegrationTest
  script:
    - echo "Triggering Karate test pipeline in integration-tests-karate..."
    - |
      curl --request POST \
        --form token=$KARATE_TRIGGER_TOKEN \
        --form ref=$KARATE_TRIGGER_BRANCH \
        --form variables[ENVIRONMENT]=$TARGET_ENV \
        https://gitlab.com/api/v4/projects/$KARATE_PROJECT_ID/trigger/pipeline
  rules:
    - if: '$RUN_KARATE == "true"'

Purpose:

Makes the Karate pipeline triggerable from other repositories using include:.

Accepts environment variables and trigger tokens securely.


> Note: This file should not be included in the Karate repoâ€™s .gitlab-ci.yml.




---

Files in the Main Java Project

3. .gitlab-ci.yml

Modify your main Java project's pipeline like this:

include:
  - project: your-group/integration-tests-karate
    file: karate-trigger-template.yml

stages:
  - Build
  - Sonar
  - IntegrationTest
  - Deploy

Purpose:

Pulls in the trigger job from the Karate repo using GitLab CI include:.

Keeps the main repo CI clean and modular.



---

4. CI/CD Variables (in the Java Project)

Set the following variables under Settings > CI/CD > Variables:


---

Summary

Karate repo owns the test logic and only runs tests when triggered.

Main Java project includes a clean, reusable trigger job from the Karate repo.

The structure is modular, secure, and promotes separation of concerns.


This setup makes it easy to reuse the Karate test trigger logic across multiple services and environments while keeping pipeline logic centralized.
